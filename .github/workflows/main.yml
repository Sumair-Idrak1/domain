name: Auto Create & Deploy to Coolify

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate Unique Subdomain
        run: echo "SUBDOMAIN=app-$(date +%s).bot.idrakai.com" >> $GITHUB_ENV

      - name: Verify Coolify API Token
        run: |
          if [ -z "${{ secrets.COOLIFY_API_TOKEN }}" ]; then
            echo "Error: COOLIFY_API_TOKEN is not set."
            exit 1
          fi

      - name: Create Project in Coolify
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
        run: |
          RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"name": "coolify-auto-project-'$(date +%s)'"}')
          echo "API Response: $RESPONSE"
          PROJECT_UUID=$(echo "$RESPONSE" | jq -r '.uuid')
          if [ "$PROJECT_UUID" == "null" ] || [ -z "$PROJECT_UUID" ]; then
            echo "Error: Failed to retrieve PROJECT_UUID."
            exit 1
          fi
          echo "PROJECT_UUID=$PROJECT_UUID" >> $GITHUB_ENV

      - name: Create Environment in Coolify
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          PROJECT_UUID: ${{ env.PROJECT_UUID }}
        run: |
          ENV_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID/environments" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"name": "production"}')

          echo "Environment Creation Response: $ENV_RESPONSE"

          ENVIRONMENT_UUID=$(echo "$ENV_RESPONSE" | jq -r '.uuid')

          if [ "$ENVIRONMENT_UUID" == "null" ] || [ -z "$ENVIRONMENT_UUID" ]; then
            echo "Error: Failed to retrieve ENVIRONMENT_UUID."
            exit 1
          fi
          echo "ENVIRONMENT_UUID=$ENVIRONMENT_UUID" >> $GITHUB_ENV



      - name: Fetch Server UUID
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
        run: |
          SERVER_RESPONSE=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/servers" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN")

          echo "Server Response: $SERVER_RESPONSE"
          SERVER_UUID=$(echo "$SERVER_RESPONSE" | jq -r '.[0].uuid')

          if [ "$SERVER_UUID" == "null" ] || [ -z "$SERVER_UUID" ]; then
            echo "Error: Failed to retrieve SERVER_UUID."
            exit 1
          fi

          echo "SERVER_UUID=$SERVER_UUID" >> $GITHUB_ENV

      - name: Create Service in Coolify
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          PROJECT_UUID: ${{ env.PROJECT_UUID }}
          SERVER_UUID: ${{ env.SERVER_UUID }}
          ENVIRONMENT_UUID: ${{ env.ENVIRONMENT_UUID }}
        run: |
          RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/services" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
              "project_uuid": "'$PROJECT_UUID'",
              "server_uuid": "'$SERVER_UUID'",
              "environment_uuid": "'$ENVIRONMENT_UUID'",
              "type": "git",
              "name": "my-service-'$(date +%s)'"
            }')

          echo "Service Creation Response: $RESPONSE"
          SERVICE_UUID=$(echo "$RESPONSE" | jq -r '.uuid')

          if [ "$SERVICE_UUID" == "null" ] || [ -z "$SERVICE_UUID" ]; then
            echo "Error: Failed to create service."
            exit 1
          fi

          echo "SERVICE_UUID=$SERVICE_UUID" >> $GITHUB_ENV

      - name: Deploy Service in Coolify
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          SERVICE_UUID: ${{ env.SERVICE_UUID }}
        run: |
          DEPLOY_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/services/$SERVICE_UUID/deploy" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
            -H "Content-Type: application/json")

          echo "Deployment Response: $DEPLOY_RESPONSE"

      - name: Output Deployment URL
        run: echo "Project deployed at https://$SUBDOMAIN"
