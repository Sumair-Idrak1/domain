name: Deploy to Coolify

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Environment Variables
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
        run: |
          echo "COOLIFY_API_TOKEN=${COOLIFY_API_TOKEN}" >> $GITHUB_ENV
          echo "COOLIFY_SERVER=${COOLIFY_SERVER}" >> $GITHUB_ENV

      - name: Get or Create Project
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
        run: |
          PROJECT_NAME="MyCoolifyProject"
          PROJECT_RESPONSE=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/projects" -H "Authorization: Bearer $COOLIFY_API_TOKEN")
          PROJECT_UUID=$(echo "$PROJECT_RESPONSE" | jq -r ".[] | select(.name==\"$PROJECT_NAME\").uuid")
          
          if [[ -z "$PROJECT_UUID" || "$PROJECT_UUID" == "null" ]]; then
            echo "Creating new project..."
            PROJECT_CREATE_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects" \
              -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{"name": "'$PROJECT_NAME'"}')
            PROJECT_UUID=$(echo "$PROJECT_CREATE_RESPONSE" | jq -r '.uuid')
          fi
          
          echo "PROJECT_UUID=$PROJECT_UUID" >> $GITHUB_ENV
          echo "Using project UUID: $PROJECT_UUID"

      - name: Get or Create Environment
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          PROJECT_UUID: ${{ env.PROJECT_UUID }}
        run: |
          ENV_NAME="production"
          ENV_RESPONSE=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID" -H "Authorization: Bearer $COOLIFY_API_TOKEN")
          ENVIRONMENT_UUID=$(echo "$ENV_RESPONSE" | jq -r ".environments | map(select(.name==\"$ENV_NAME\"))[0].uuid")
          
          if [[ -z "$ENVIRONMENT_UUID" || "$ENVIRONMENT_UUID" == "null" ]]; then
            echo "Creating new environment..."
            CREATE_ENV_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID/environments" \
              -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{"name": "'$ENV_NAME'"}')
            ENVIRONMENT_UUID=$(echo "$CREATE_ENV_RESPONSE" | jq -r '.uuid')
          fi
          
          echo "ENVIRONMENT_UUID=$ENVIRONMENT_UUID" >> $GITHUB_ENV
          echo "Using environment UUID: $ENVIRONMENT_UUID"

      - name: Get or Create Service
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          PROJECT_UUID: ${{ env.PROJECT_UUID }}
          ENVIRONMENT_UUID: ${{ env.ENVIRONMENT_UUID }}
        run: |
          SERVICE_NAME="my-service"
          SERVICES_RESPONSE=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID/environments/$ENVIRONMENT_UUID/services" -H "Authorization: Bearer $COOLIFY_API_TOKEN")
          
          echo "Raw API Response: $SERVICES_RESPONSE"  # Debugging output

          # Check if the response is valid JSON before parsing
          if echo "$SERVICES_RESPONSE" | jq empty 2>/dev/null; then
            SERVICE_UUID=$(echo "$SERVICES_RESPONSE" | jq -r ".[] | select(.name==\"$SERVICE_NAME\").uuid")
          else
            echo "Error: API returned invalid JSON!"
            exit 1
          fi
          
          if [[ -z "$SERVICE_UUID" || "$SERVICE_UUID" == "null" ]]; then
            echo "Creating new service..."
            SERVICE_CREATE_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID/environments/$ENVIRONMENT_UUID/services" \
              -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{"name": "'$SERVICE_NAME'", "type": "docker"}')
            SERVICE_UUID=$(echo "$SERVICE_CREATE_RESPONSE" | jq -r '.uuid')
          fi
          
          echo "SERVICE_UUID=$SERVICE_UUID" >> $GITHUB_ENV
          echo "Using service UUID: $SERVICE_UUID"


      - name: Deploy Service
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          PROJECT_UUID: ${{ env.PROJECT_UUID }}
          ENVIRONMENT_UUID: ${{ env.ENVIRONMENT_UUID }}
          SERVICE_UUID: ${{ env.SERVICE_UUID }}
        run: |
          DEPLOY_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID/environments/$ENVIRONMENT_UUID/services/$SERVICE_UUID/deploy" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN")
          echo "Deployment Response: $DEPLOY_RESPONSE"

      - name: Notify on Failure
        if: failure()
        run: echo "Deployment failed! Please check logs."
