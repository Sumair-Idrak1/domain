name: Auto Create & Deploy to Coolify

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate Unique Subdomain
        run: echo "SUBDOMAIN=app-$(date +%s).bot.idrakai.com" >> $GITHUB_ENV

      - name: Verify Coolify API Token
        run: |
          if [ -z "${{ secrets.COOLIFY_API_TOKEN }}" ]; then
            echo "Error: COOLIFY_API_TOKEN is not set."
            exit 1
          fi

      - name: Check if Project Exists or Create One
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
        run: |
          PROJECT_RESPONSE=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/projects" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN")

          EXISTING_PROJECT_UUID=$(echo "$PROJECT_RESPONSE" | jq -r '.[] | select(.name | startswith("coolify-auto-project")) | .uuid')

          if [ -n "$EXISTING_PROJECT_UUID" ]; then
            echo "Project already exists: $EXISTING_PROJECT_UUID"
            echo "PROJECT_UUID=$EXISTING_PROJECT_UUID" >> $GITHUB_ENV
          else
            RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects" \
              -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{"name": "coolify-auto-project-'$(date +%s)'"}')
            PROJECT_UUID=$(echo "$RESPONSE" | jq -r '.uuid')

            if [ "$PROJECT_UUID" == "null" ] || [ -z "$PROJECT_UUID" ]; then
              echo "Error: Failed to create or retrieve PROJECT_UUID."
              exit 1
            fi
            echo "PROJECT_UUID=$PROJECT_UUID" >> $GITHUB_ENV
          fi

      - name: Check or Create Environment
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          PROJECT_UUID: ${{ env.PROJECT_UUID }}
        run: |
          PROJECT_CHECK=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN")

          EXISTING_ENV_UUID=$(echo "$PROJECT_CHECK" | jq -r '.environments[] | select(.name=="production") | .uuid')

          if [ -n "$EXISTING_ENV_UUID" ]; then
            echo "Using existing environment: $EXISTING_ENV_UUID"
            echo "ENVIRONMENT_UUID=$EXISTING_ENV_UUID" >> $GITHUB_ENV
          else
            ENV_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID/environments" \
              -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{"name": "production"}')

            ENVIRONMENT_UUID=$(echo "$ENV_RESPONSE" | jq -r '.uuid')

            if [ "$ENVIRONMENT_UUID" == "null" ] || [ -z "$ENVIRONMENT_UUID" ]; then
              echo "Error: Failed to create or retrieve ENVIRONMENT_UUID."
              exit 1
            fi
            echo "ENVIRONMENT_UUID=$ENVIRONMENT_UUID" >> $GITHUB_ENV
          fi

      - name: Fetch Server UUID
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
        run: |
          SERVER_RESPONSE=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/servers" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN")

          SERVER_UUID=$(echo "$SERVER_RESPONSE" | jq -r '.[0].uuid')

          if [ "$SERVER_UUID" == "null" ] || [ -z "$SERVER_UUID" ]; then
            echo "Error: Failed to retrieve SERVER_UUID."
            exit 1
          fi

          echo "SERVER_UUID=$SERVER_UUID" >> $GITHUB_ENV

      - name: Check or Create Service
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          PROJECT_UUID: ${{ env.PROJECT_UUID }}
          SERVER_UUID: ${{ env.SERVER_UUID }}
          ENVIRONMENT_UUID: ${{ env.ENVIRONMENT_UUID }}
        run: |
          SERVICES_RESPONSE=$(curl -s -X GET "$COOLIFY_SERVER/api/v1/projects/$PROJECT_UUID/services" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN")

          EXISTING_SERVICE_UUID=$(echo "$SERVICES_RESPONSE" | jq -r '.[] | select(.name | startswith("my-service")) | .uuid')

          if [ -n "$EXISTING_SERVICE_UUID" ]; then
            echo "Using existing service: $EXISTING_SERVICE_UUID"
            echo "SERVICE_UUID=$EXISTING_SERVICE_UUID" >> $GITHUB_ENV
          else
            RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/services" \
              -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{
                "project_uuid": "'$PROJECT_UUID'",
                "server_uuid": "'$SERVER_UUID'",
                "environment_uuid": "'$ENVIRONMENT_UUID'",
                "type": "git",
                "name": "my-service-'$(date +%s)'"
              }')

            SERVICE_UUID=$(echo "$RESPONSE" | jq -r '.uuid')

            if [ "$SERVICE_UUID" == "null" ] || [ -z "$SERVICE_UUID" ]; then
              echo "Error: Failed to create service."
              exit 1
            fi

            echo "SERVICE_UUID=$SERVICE_UUID" >> $GITHUB_ENV
          fi

      - name: Deploy Service
        env:
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
          COOLIFY_SERVER: "https://coolify.bot.idrakai.com"
          SERVICE_UUID: ${{ env.SERVICE_UUID }}
        run: |
          DEPLOY_RESPONSE=$(curl -s -X POST "$COOLIFY_SERVER/api/v1/services/$SERVICE_UUID/deploy" \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
            -H "Content-Type: application/json")

          echo "Deployment Response: $DEPLOY_RESPONSE"

      - name: Output Deployment URL
        run: echo "Project deployed at https://$SUBDOMAIN"
